export default {
  code: `
  from tabuleiro import *
  
  # funÃ§Ã£o que percorre o percurso
  def faz_percurso(n):
      while not n.ve() == "gold2":
          if n.ve() == "green":
              # vira Ã  direita
              n.direita()
          elif n.ve() == "red":
              # vira Ã  esquerda
              n.esquerda()
          n.frente(1)
  
  # define percurso
  lista = [(1,11),(1,15),(2,12),(2,13),(2,14),(3,11),(3,15),(4,11),(4,12),\
      (4,13),(4,15),(4,16),(4,17),(4,18),(5,2),(5,11),(5,13),(5,14),(5,15),\
      (5,16),(5,18),(6,2),(6,3),(6,4),(6,5),(6,7),(6,8),(6,9),(6,10),(6,12),\
      (6,13),(6,14),(6,16),(6,17),(6,18),(6,19),(6,20),(7,2),(7,3),(7,4),\
      (7,6),(7,10),(7,14),(7,19),(8,2),(8,3),(8,4),(8,6),(8,7),(8,10),(8,14),\
      (8,15),(8,16),(8,17),(8,18),(8,19),(9,2),(9,3),(9,5),(9,8),(9,10),\
      (9,14),(9,16),(10,2),(10,3),(10,4),(10,8),(10,9),(10,10),(10,14),(11,1),\
      (11,2),(11,3),(11,4),(11,5),(11,6),(11,7),(11,8),(11,9),(11,10),(11,14),\
      (12,1),(12,4),(12,10),(12,15),(12,16),(12,17),(12,18),(13,1),(13,2),\
      (13,3),(13,5),(13,6),(13,7),(13,8),(13,9),(13,10),(13,11),(13,12),\
      (13,13)]
  percurso = ("grey", lista)
  chegada  = ("gold2", [(12,19)])
  sinaisE = ("red", [(2,11),(2,15),(6,6),(9,4),(13,4),(13,14)])
  sinaisD = ("green", [(6,11),(6,15),(9,6),(12,14)])
  
  # cria tabuleiro e nave
  t = Tabuleiro(14, 20, [chegada, sinaisE, sinaisD, percurso])
  n = Nave(t, 6, 20, "O")
  
  # faz o percurso de forma automÃ¡tica
  faz_percurso(n)
  
  input()`
};
